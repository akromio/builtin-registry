spec: v1.0
desc: Catalog for working Akromio plugins.

dataset:
  - const: src
    desc: Dir where the source templates are.
    value: $(__dir)/_$(__catalogName)
    tags: [hidden]
  
  - const: dst
    desc: Local directory where to save the files.
    value: $(workDir)
  
  - const: pluginQ
    desc: Questions for creating a plugin scaffold.
    tags: [hidden, questions]
    value:
      - input: pluginName
        title: Plugin package name

      - input: pluginAbbr
        title: Plugin name (that is, the name to use in the catalogs)
        
      - input: pluginDesc

      - select: programmingLanguage
        options: [Dogma]
        value: Dogma
      
      - input: authorName
      - input: authorEmail
      - input: authorUrl
      - input: bugsEmail
      - input: gitOwner
      - input: gitRepo
      
      - select: pluginType
        options: [simple, composite]
    
  - const: opQ
    desc: Questions for creating an operation.
    tags: [hidden, questions]
    value:
      - input: opName
      - input: opDesc
      - select: programmingLanguage
        options: [Dogma]

jobs:
  - macro: plugin
    title: Create plugin scaffold
    ini:
      - quiet: $answers = inquire $(pluginQ) $(answers)
    dataset: [item, content]
    steps:
      - fs.createDir $(dst)/src
      - fs.createDir $(dst)/src/ops
      - cr.copy $(src)/.babelrc $(dst)/.babelrc
      - cr.copy $(src)/.c8rc.json $(dst)/.c8rc.json
      - cr.copy $(src)/_gitignore $(dst)/.gitignore
      - cr.copy $(src)/.mocharc.yaml $(dst)/.mocharc.yaml
      - cr.copy $(src)/_npmignore $(dst)/.npmignore
      - cr.copy $(src)/dogmac.yaml $(dst)/dogmac.yaml

      - quiet: $item = cr.getItem $(src)/package.json.dogma.hbs
      - log $(item.cty)
      - log $(item.value)
      - quiet: $content = hbs.render $(item.value) $(answers)
      - file.write $(content) $(dst)/package.json
      

      - quiet: $item = cr.getItem $(src)/README.md.hbs
      - quiet: $content = hbs.render $(item.value) $(answers)
      - file.write $(content) $(dst)/README.md

      - quiet: $item = cr.getItem $(src)/src/index.dog.hbs
      - quiet: $content = hbs.render $(item.value) $(answers)
      - file.write $(content) $(dst)/src/index.dog

      - quiet: $item = cr.getItem $(src)/src/index.test.dog.hbs
      - quiet: $content = hbs.render $(item.value) $(answers)
      - file.write $(content) $(dst)/src/index.test.dog

  - macro: op
    title: Create an operation scaffold
    ini:
      - quiet: $answers = inquire $(opQ) $(answers)
    dataset: [item, content]
    steps:
      - quiet: $item = cr.getItem $(src)/src/ops/op.dog.hbs
      - quiet: $content = hbs.render $(item.value) $(answers)
      - file.write $(content) $(dst)/src/ops/$(answers.opName).dog

      - quiet: $item = cr.getItem $(src)/src/ops/op.test.dog.hbs
      - quiet: $content = hbs.render $(item.value) $(answers)
      - file.write $(content) $(dst)/src/ops/$(answers.opName).test.dog

      - [log, add to src/index.dog => $(answers.opName) = use("./ops/$(answers.opName)")]
